.pc
.TH Editors.rakumod 1 2023-12-10
.SH GUI::Editors
.SS Table of Contents
.IP \(bu 2m
NAME [#name]
.IP \(bu 2m
AUTHOR [#author]
.IP \(bu 2m
VERSION [#version]
.IP \(bu 2m
TITLE [#title]
.IP \(bu 2m
SUBTITLE [#subtitle]
.IP \(bu 2m
COPYRIGHT [#copyright]
.IP \(bu 2m
Introduction [#introduction]
.IP \(bu 2m
$editor\-config [#editor-config]
.IP \(bu 2m
@config\-files [#config-files]
.IP \(bu 2m
grammar Editors [#grammar-editors]
.IP \(bu 2m
Some useful variables [#some-useful-variables]
.RS 2n
.IP \(bu 2m
$GUI_EDITOR [#gui_editor]
.RE
.RS 2n
.IP \(bu 2m
$VISUAL [#visual]
.RE
.RS 2n
.IP \(bu 2m
$EDITOR [#editor]
.RE
.RS 2n
.IP \(bu 2m
@GUIEDITORS [#guieditors-2]
.RE
.RS 2n
.IP \(bu 2m
@gui\-editors [#gui-editors]
.RE
.RS 2n
.IP \(bu 2m
@default\-editors [#default-editors]
.RE
.RS 2n
.IP \(bu 2m
@override\-gui_editor [#override-gui_editor]
.RE
.RS 2n
.IP \(bu 2m
$override\-GUI_EDITOR [#override-gui_editor-1]
.RE
.RS 2n
.RS 2n
.IP \(bu 2m
In \fBinit\-gui\-editors\fR [#in-init-gui-editors]
.RE
.RE
.IP \(bu 2m
Introduction [#introduction]
.IP \(bu 2m
Introduction [#introduction]
.IP \(bu 2m
Introduction [#introduction]
.SH "NAME"
GUI::Editors 
.SH "AUTHOR"
Francis Grizzly Smit (grizzly@smit\&.id\&.au)
.SH "VERSION"
0\&.1\&.0
.SH "TITLE"
GUI::Editors
.SH "SUBTITLE"
A Raku module for managing the users GUI Editor preferences in a variety of programs\&.

Top of Document [#table-of-contents]
.SH Introduction

A \fBRaku\fR module for managing the users GUI Editor preferences in a variety of programs\&. 
.SS $editor\-config

A constant which contains the location of the users editors file

.RS 4m
.EX
# the home dir #
constant $home = %*ENV<HOME>\&.Str();

# config files
constant $editor\-config is export = "$home/\&.local/share/gui\-editors";


.EE
.RE
.P
\fBNB: the $home is the value of the users HOME environment variable\&.\fR

Top of Document [#table-of-contents]
.SS @config\-files

An array containing the configuration files of the program, by default it is set to contain \fBeditors\fR the editors configuration file the remainder should be added by \fBinit\-gui\-editors(\&.\&.\&.)\fR the initialization procedure for the module\&.

.RS 4m
.EX
# The config files to test for #
my Str:D @config\-files = qw{editors};

sub config\-files( \-\-> Array[Str:D]) is export {
    return @config\-files;
}


.EE
.RE
.SS @guieditors

An array of known \fBGUI\fR editors\&. 

.RS 4m
.EX
my Str:D @guieditors;

sub guieditors( \-\-> Array[Str:D]) is export {
    return @guieditors;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS grammar Editors

.RS 4m
.EX
grammar Editors is export {
    regex TOP                 { [ <line> [ \v+ <line> ]* \v* ]? }
    regex line                { [ <white\-space\-line> || <override\-gui_editor> || <config\-line> || <editor\-to\-use> || <comment\-line> ] }
    regex white\-space\-line    { ^^ \h* $$ }
    regex override\-gui_editor { ^^ \h* 'override' \h+ 'GUI_EDITOR' \h* $$ }
    regex comment\-line        { ^^ \h* '#' <\-[\v]>* $$ }
    regex config\-line         { ^^ \h* 'guieditors' \h* '+'? '=' \h* <editor> \h* [ '#' <comment> \h* ]? $$ }
    regex editor\-to\-use       { ^^ \h* 'editor' \h* ':'? '=' \h* <editor> \h* [ '#' <comment> \h* ]? $$ }
    regex editor              { <editor\-name> || <path> <editor\-name> }
    regex comment             { <\-[\n]>* }
    regex path                { <lead\-in>  <path\-segments>? }
    regex lead\-in             { [ '/' | '~' | '~/' ] }
    regex path\-segments       { <path\-segment> [ '/' <path\-segment> ]* '/' }
    token path\-segment        { [ <with\-space\-in\-it> || <with\-other\-stuff> ] }
    token with\-space\-in\-it    { \w+ [ ' ' \w+ ]* }
    token with\-other\-stuff    { <start\-other\-stuff> <tail\-other\-stuff>* }
    token start\-other\-stuff   { \w+ }
    token tail\-other\-stuff    { <other\-stuff>+ <tails\-tail>? }
    token tails\-tail          { \w+ }
    token other\-stuff         { [ '\-' || '+' || ':' || '@' || '=' || ',' || '&' || '%' || '\&.' ] }
    token editor\-name         { <with\-other\-stuff> }
}

class EditorsActions is export {
    \&.\&.\&.
    \&.\&.\&.
    \&.\&.\&.
    method TOP($made) {
        my @top = $made<line>»\&.made;
        $made\&.make: @top;
    }
} # class EditorsActions #


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS Some useful variables

\fBNB: All these variables are available outside of the module as a sub of the same name\&. That way I can give read only access to them\&.\fR
.SS $GUI_EDITOR

The value of the \fB%*ENV«GUI_EDITOR»\fR environment variable or \fB''\fR if not set\&.
.SS $VISUAL

The value of the \fB%*ENV«VISUAL»\fR environment variable or \fB''\fR if not set\&.
.SS $EDITOR

The value of the \fB%*ENV«EDITOR»\fR environment variable or \fB''\fR if not set\&.

.RS 4m
.EX
my Str:D $GUI_EDITOR = ((%*ENV<GUI_EDITOR>:exists) ?? ~%*ENV<GUI_EDITOR> !! '');
my Str:D $VISUAL     = ((%*ENV<VISUAL>:exists) ?? ~%*ENV<VISUAL> !! '');
my Str:D $EDITOR     = ((%*ENV<EDITOR>:exists) ?? ~%*ENV<EDITOR> !! '');

sub GUI_EDITOR( \-\-> Str:D) is export {
    return $GUI_EDITOR;
}

sub VISUAL( \-\-> Str:D) is export {
    return $VISUAL;
}

sub EDITOR( \-\-> Str:D) is export {
    return $EDITOR;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS @GUIEDITORS

The Array of Hashes that the \fBEditors\fR grammar and \fBEditorsActions\fR generate from parsing the \fBeditors\fR file\&.
.SS @gui\-editors

The Array of GUI Editors defined in the \fBeditors\fR file\&.
.SS @default\-editors

The array of \fBeditors\fR selected in the file should have only \fBone\fR element otherwise the file is miss configured\&.

.RS 4m
.EX
my Hash @GUIEDITORS;
my Str:D @gui\-editors;
my Str:D @default\-editors;

sub GUIEDITORS( \-\-> Array[Hash]) is export {
    return @GUIEDITORS;
}

sub gui\-editors( \-\-> Array[Str:D]) is export {
    return @gui\-editors;
}

sub default\-editors( \-\-> Array[Str:D]) is export {
    return @default\-editors;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS @override\-gui_editor

An array of \fBTrue\fR values one for each of the times the \fBoverride GUI_EDITOR\fR directive appears in the \fBeditors\fR file, it is an error for it to appear more than once, (it's a zero or one rule)\&.
.SS $override\-GUI_EDITOR

True if the \fBoverride GUI_EDITOR\fR directive is present in the \fBeditors\fR file\&. If \fBTrue\fR then the setting in the file overrides the \fB%*ENV«GUI_EDITOR»\fR variable, otherwise \fB%*ENV«GUI_EDITOR»\fR wins\&.

.RS 4m
.EX
my Bool:D @override\-gui_editor;

sub override\-gui_editor( \-\-> Array[Bool:D]) is export {
    return @override\-gui_editor;
}

my Bool:D $override\-GUI_EDITOR = False;

sub override\-GUI_EDITOR( \-\-> Bool:D) is export {
    return $override\-GUI_EDITOR;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS In \fBinit\-gui\-editors\fR 

.RS 4m
.EX
sub init\-gui\-editors(Str:D @client\-config\-files, Str:D $client\-config\-path,
                              &gen\-configs:(Str:D, Str:D \-\-> Bool:D),
                                  &check:(Str:D @cfg\-files, Str:D $config \-\-> Bool:D)
                                                                    \-\-> Bool:D) is  export


.EE
.RE
.P
\&.\&.\&.

\&.\&.\&.

\&.\&.\&.

.RS 4m
.EX
@GUIEDITORS = Editors\&.parse(@editors\-file\&.join("\x0A"), :enc('UTF\-8'), :$actions)\&.made;
@gui\-editors = @GUIEDITORS\&.grep( \-> %l { %l«type» eq 'config\-line' } )\&.map: \-> %ln { %ln«value»; };
@default\-editors = @GUIEDITORS\&.grep( \-> %l { %l«type» eq 'editor\-to\-use' } )\&.map: \-> %ln { %ln«value»; };
if @default\-editors > 1 {
    $*ERR\&.say: "Error: file $editor\-config/editors is miss configured  more than one editor defined should be 0 or 1";
}
@override\-gui_editor = @GUIEDITORS\&.grep( \-> %l { %l«type» eq 'override\-gui_editor' } )\&.map: \-> %ln { %ln«value»; };
if @override\-gui_editor > 1 {
    my Int:D $elems = @override\-gui_editor\&.elems;
    $*ERR\&.say: qq[Make up your mind only one "override GUI_EDITOR" is required, you supplied $elems are you insane???];
    $override\-GUI_EDITOR = True;
} elsif @override\-gui_editor == 1 {
    $override\-GUI_EDITOR = True;
}
if @gui\-editors {
    #@gui\-editors\&.raku\&.say;
    for @gui\-editors \-> $geditor {
        if !@guieditors\&.grep: { $geditor } {
            my Str $guieditor = $geditor;
            $guieditor \&.=trim;
            @guieditors\&.append($guieditor);
        }
    }
}

if $override\-GUI_EDITOR && @default\-editors {
    $editor = @default\-editors[@default\-editors \- 1];
}elsif %*ENV<GUI_EDITOR>:exists {
    my Str $guieditor = ~%*ENV<GUI_EDITOR>;
    if ! @guieditors\&.grep( { $_ eq $guieditor\&.IO\&.basename } ) {
        @guieditors\&.prepend($guieditor\&.IO\&.basename);
    }
} elsif $editor\-guessed && @default\-editors {
    $editor = @default\-editors[@default\-editors \- 1];
}


.EE
.RE
.P
Top of Document [#table-of-contents]
