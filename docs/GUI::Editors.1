.pc
.TH Editors.rakumod 1 2023-12-16
.SH GUI::Editors
.SS Table of Contents
.IP \(bu 2m
NAME [#name]
.IP \(bu 2m
AUTHOR [#author]
.IP \(bu 2m
VERSION [#version]
.IP \(bu 2m
TITLE [#title]
.IP \(bu 2m
SUBTITLE [#subtitle]
.IP \(bu 2m
COPYRIGHT [#copyright]
.IP \(bu 2m
Introduction [#introduction]
.IP \(bu 2m
$editor\-config [#editor-config]
.IP \(bu 2m
@config\-files [#config-files]
.IP \(bu 2m
grammar Editors & action class EditorsActions [#grammar-editors--action-class-editorsactions]
.IP \(bu 2m
grammar EditorLine & class EditorLineActions [#grammar-editorline--class-editorlineactions]
.IP \(bu 2m
grammar OverrideGUIEditor & actions class OverrideGUIEditorActions [#grammar-overrideguieditor--actions-class-overrideguieditoractions]
.IP \(bu 2m
Some useful variables [#some-useful-variables]
.RS 2n
.IP \(bu 2m
$GUI_EDITOR [#gui_editor]
.RE
.RS 2n
.IP \(bu 2m
$VISUAL [#visual]
.RE
.RS 2n
.IP \(bu 2m
$EDITOR [#editor]
.RE
.RS 2n
.IP \(bu 2m
@GUIEDITORS [#guieditors-2]
.RE
.RS 2n
.IP \(bu 2m
@gui\-editors [#gui-editors]
.RE
.RS 2n
.IP \(bu 2m
@default\-editors [#default-editors]
.RE
.RS 2n
.IP \(bu 2m
@override\-gui_editor [#override-gui_editor]
.RE
.RS 2n
.IP \(bu 2m
$override\-GUI_EDITOR [#override-gui_editor-1]
.RE
.RS 2n
.RS 2n
.IP \(bu 2m
In \fBinit\-gui\-editors\fR [#in-init-gui-editors]
.RE
.RE
.RS 2n
.IP \(bu 2m
$editor [#editor-1]
.RE
.IP \(bu 2m
edit\-configs() [#edit-configs]
.IP \(bu 2m
Editor functions [#editor-functions]
.RS 2n
.IP \(bu 2m
list\-editors(…) [#list-editors]
.RE
.RS 2n
.IP \(bu 2m
list\-editors\-file(…) [#introduction]
.RE
.RS 2n
.IP \(bu 2m
editors\-stats(…) [#editors-stats]
.RE
.RS 2n
.IP \(bu 2m
BadEditor [#badeditor]
.RE
.RS 2n
.IP \(bu 2m
set\-editor [#set-editor]
.RE
.RS 2n
.IP \(bu 2m
add\-gui\-editor(…) [#add-gui-editor]
.RE
.RS 2n
.IP \(bu 2m
set\-override\-GUI_EDITOR(…) [#set-override-gui_editor]
.RE
.RS 2n
.IP \(bu 2m
backup\-editors(…) [#backup-editors]
.RE
.RS 2n
.IP \(bu 2m
restore\-editors(…) [#restore-editors]
.RE
.RS 2n
.IP \(bu 2m
list\-editors\-backups(…) [#list-editors-backups]
.RE
.RS 2n
.IP \(bu 2m
backups\-menu\-restore(…) [#backups-menu-restore]
.RE
.RS 2n
.IP \(bu 2m
Introduction [#introduction]
.RE
.RS 2n
.IP \(bu 2m
edit\-files(…) [#edit-files]
.RE
.SH "NAME"
GUI::Editors 
.SH "AUTHOR"
Francis Grizzly Smit (grizzly@smit\&.id\&.au)
.SH "VERSION"
0\&.1\&.2
.SH "TITLE"
GUI::Editors
.SH "SUBTITLE"
A Raku module for managing the users GUI Editor preferences in a variety of programs\&.
.SH "COPYRIGHT"
LGPL V3\&.0+ LICENSE [https://github.com/grizzlysmit/GUI-Editors/blob/main/LICENSE]

Top of Document [#table-of-contents]
.SH Introduction

A \fBRaku\fR module for managing the users GUI Editor preferences in a variety of programs\&. 
.SS $editor\-config

A constant which contains the location of the users editors file

.RS 4m
.EX
# the home dir #
constant $home = %*ENV<HOME>\&.Str();

# config files
constant $editor\-config is export = "$home/\&.local/share/gui\-editors";


.EE
.RE
.P
\fBNB: the $home is the value of the users HOME environment variable\&.\fR

Top of Document [#table-of-contents]
.SS @config\-files

An array containing the configuration files of the program, by default it is set to contain \fBeditors\fR the editors configuration file the remainder should be added by \fBinit\-gui\-editors(\&.\&.\&.)\fR the initialization procedure for the module\&.

.RS 4m
.EX
# The config files to test for #
my Str:D @config\-files = qw{editors};

sub config\-files( \-\-> Array[Str:D]) is export {
    return @config\-files;
}


.EE
.RE
.SS @guieditors

An array of known \fBGUI\fR editors\&. 

.RS 4m
.EX
my Str:D @guieditors;

sub guieditors( \-\-> Array[Str:D]) is export {
    return @guieditors;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS grammar Editors & action class EditorsActions

.RS 4m
.EX
grammar Editors is BasePaths is export {
    regex TOP                 { [ <line> [ \v+ <line> ]* \v* ]? }
    regex line                { [ <white\-space\-line> || <override\-gui_editor> || <config\-line> || <editor\-to\-use> || <comment\-line> ] }
    regex white\-space\-line    { ^^ \h* $$ }
    regex override\-gui_editor { ^^ \h* 'override' \h+ 'GUI_EDITOR' [ \h+ '#' <comment> ]? \h* $$ }
    regex comment\-line        { ^^ \h* '#' <\-[\v]>* $$ }
    regex config\-line         { ^^ \h* 'guieditors' \h* '+'? '=' \h* <editor> \h* [ '#' <comment> \h* ]? $$ }
    regex editor\-to\-use       { ^^ \h* 'editor' \h* ':'? '=' \h* <editor> \h* [ '#' <comment> \h* ]? $$ }
    regex editor              { <editor\-name> || <base\-path> <editor\-name> }
    regex comment             { <\-[\n]>* }
    token editor\-name         { <with\-other\-stuff> }
}

class EditorsActions does BasePathsActions is export {
    method white\-space\-line($/) {
        my %wspln = type => 'white\-space\-line', value => ~$/;
        make %wspln;
    }
    method comment\-line($/) {
        my %comln = type => 'comment\-line', value => ~$/;
        make %comln;
    }
    #token editor\-name         { <with\-other\-stuff> }
    method editor\-name($/) {
        my $edname = $/<with\-other\-stuff>\&.made;
        make $edname;
    }
    method editor($/) {
        my $ed\-name;
        if $/<base\-path> {
            $ed\-name = $/<base\-path>\&.made ~ $/<editor\-name>\&.made;
        } else {
            $ed\-name = $/<editor\-name>\&.made;
        }
        make $ed\-name;
    }
    method comment($/) {
        my $comm = (~$/)\&.trim;
        make $comm;
    }
    method config\-line($/) {
        my %cfg\-line = type => 'config\-line', value => $/<editor>\&.made;
        if $/<comment> {
            my $com = $/<comment>\&.made;
            %cfg\-line«comment» = $com;
        }
        make %cfg\-line;
    }
    method editor\-to\-use($/) {
        my %editor\-to\-use = type => 'editor\-to\-use', value => $/<editor>\&.made;
        if $/<comment> {
            my $com = $/<comment>\&.made;
            %editor\-to\-use«comment» = $com;
        }
        make %editor\-to\-use;
    }
    method override\-gui_editor($/) {
        my %override\-gui_editor = type => 'override\-gui_editor', :value;
        if $/<comment> {
            my $com = $/<comment>\&.made;
            %override\-gui_editor«comment» = $com;
        }
        make %override\-gui_editor;
    }
    method line($/) {
        my %ln;
        if $/<white\-space\-line> {
            %ln = $/<white\-space\-line>\&.made;
        } elsif $/<comment\-line> {
            %ln = $/<comment\-line>\&.made;
        } elsif $/<config\-line> {
            %ln = $/<config\-line>\&.made;
        } elsif $/<editor\-to\-use> {
            %ln = $/<editor\-to\-use>\&.made;
        } elsif $/<override\-gui_editor> {
            %ln = $/<override\-gui_editor>\&.made;
        }
        make %ln;
    }
    method TOP($made) {
        my @top = $made<line>»\&.made;
        $made\&.make: @top;
    }
} # class EditorsActions does BasePathsActions is export #


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS grammar EditorLine & class EditorLineActions

A grammar and associated action class to parse and recognise the \fBeditor := value # comment\fR lines in the \fBeditors\fR file\&.

.RS 4m
.EX
grammar EditorLine is BasePaths is export {
    regex TOP                 { ^ \h* 'editor' \h* ':'? '=' \h* <editor> \h* [ '#' <comment> \h* ]? $ }
    regex editor              { <editor\-name> || <base\-path> <editor\-name> }
    regex comment             { <\-[\n]>* }
    token editor\-name         { <with\-other\-stuff> }
}

class EditorLineActions does BasePathsActions is export {
    #token editor\-name         { <with\-other\-stuff> }
    method editor\-name($/) {
        my $edname = $/<with\-other\-stuff>\&.made;
        make $edname;
    }
    method editor($/) {
        my $ed\-name;
        if $/<base\-path> {
            $ed\-name = $/<base\-path>\&.made ~ '/' ~ $/<editor\-name>\&.made;
        } else {
            $ed\-name = $/<editor\-name>\&.made;
        }
        make $ed\-name;
    }
    method comment($/) {
        my $comm = (~$/)\&.trim;
        make $comm;
    }
    method config\-line($/) {
        my %cfg\-line = type => 'config\-line', value => $/<editor>\&.made;
        if $/<comment> {
            my $com = $/<comment>\&.made;
            %cfg\-line«comment» = $com;
        }
        make %cfg\-line;
    }
    method TOP($made) {
        my %top = type => 'editor\-to\-use', value => $made<editor>\&.made;
        if $made<comment> {
            my $com = $made<comment>\&.made;
            %top«comment» = $com;
        }
        $made\&.make: %top;
    }
} # class EditorLineActions does BasePathsActions is export #


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS grammar OverrideGUIEditor & actions class OverrideGUIEditorActions

A grammar to parse/recognise the \fBoverride GUI_EDITOR # comment\fR line\&.

.RS 4m
.EX
grammar OverrideGUIEditor is export {
    regex TOP     { ^ \h* [ <commented> \h* ]? 'override' \h+ 'GUI_EDITOR' [ \h+ '#' <comment> ]? \h* $ }
    regex comment { <\-[\n]>* }
    token commented { '#' }
}

class OverrideGUIEditorActions is export {
    method comment($/) {
        my $comment = (~$/)\&.trim;
        make $comment;
    }
    method commented($/) {
        my $commented = (~$/)\&.trim;
        make $commented;
    }
    method TOP($made) {
        my %top = type => 'override\-gui_editor', :value;
        if $made<commented> {
            %top«value» = False;
        }
        if $made<comment> {
            my $com = $made<comment>\&.made;
            %top«comment» = $com;
        }
        $made\&.make: %top;
    }
} # class OverrideGUIEditorActions #


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS Some useful variables

\fBNB: All these variables are available outside of the module as a sub of the same name\&. That way I can give read only access to them\&.\fR
.SS $GUI_EDITOR

The value of the \fB%*ENV«GUI_EDITOR»\fR environment variable or \fB''\fR if not set\&.
.SS $VISUAL

The value of the \fB%*ENV«VISUAL»\fR environment variable or \fB''\fR if not set\&.
.SS $EDITOR

The value of the \fB%*ENV«EDITOR»\fR environment variable or \fB''\fR if not set\&.

.RS 4m
.EX
my Str:D $GUI_EDITOR = ((%*ENV<GUI_EDITOR>:exists) ?? ~%*ENV<GUI_EDITOR> !! '');
my Str:D $VISUAL     = ((%*ENV<VISUAL>:exists) ?? ~%*ENV<VISUAL> !! '');
my Str:D $EDITOR     = ((%*ENV<EDITOR>:exists) ?? ~%*ENV<EDITOR> !! '');

sub GUI_EDITOR( \-\-> Str:D) is export {
    return $GUI_EDITOR;
}

sub VISUAL( \-\-> Str:D) is export {
    return $VISUAL;
}

sub EDITOR( \-\-> Str:D) is export {
    return $EDITOR;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS @GUIEDITORS

The Array of Hashes that the \fBEditors\fR grammar and \fBEditorsActions\fR generate from parsing the \fBeditors\fR file\&.
.SS @gui\-editors

The Array of GUI Editors defined in the \fBeditors\fR file\&.
.SS @default\-editors

The array of \fBeditors\fR selected in the file should have only \fBone\fR element otherwise the file is miss configured\&.

.RS 4m
.EX
my Hash @GUIEDITORS;
my Str:D @gui\-editors;
my Str:D @default\-editors;

sub GUIEDITORS( \-\-> Array[Hash]) is export {
    return @GUIEDITORS;
}

sub gui\-editors( \-\-> Array[Str:D]) is export {
    return @gui\-editors;
}

sub default\-editors( \-\-> Array[Str:D]) is export {
    return @default\-editors;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS @override\-gui_editor

An array of \fBTrue\fR values one for each of the times the \fBoverride GUI_EDITOR\fR directive appears in the \fBeditors\fR file, it is an error for it to appear more than once, (it's a zero or one rule)\&.
.SS $override\-GUI_EDITOR

True if the \fBoverride GUI_EDITOR\fR directive is present in the \fBeditors\fR file\&. If \fBTrue\fR then the setting in the file overrides the \fB%*ENV«GUI_EDITOR»\fR variable, otherwise \fB%*ENV«GUI_EDITOR»\fR wins\&.

.RS 4m
.EX
my Bool:D @override\-gui_editor;

sub override\-gui_editor( \-\-> Array[Bool:D]) is export {
    return @override\-gui_editor;
}

my Bool:D $override\-GUI_EDITOR = False;

sub override\-GUI_EDITOR( \-\-> Bool:D) is export {
    return $override\-GUI_EDITOR;
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS In \fBinit\-gui\-editors\fR 

.RS 4m
.EX
sub init\-gui\-editors(Str:D @client\-config\-files, Str:D $client\-config\-path,
                              &gen\-configs:(Str:D, Str:D \-\-> Bool:D),
                                  &check:(Str:D @cfg\-files, Str:D $config \-\-> Bool:D)
                                                                    \-\-> Bool:D) is  export


.EE
.RE
.P
\&.\&.\&.

\&.\&.\&.

\&.\&.\&.

.RS 4m
.EX
@GUIEDITORS = Editors\&.parse(@editors\-file\&.join("\x0A"), :enc('UTF\-8'), :$actions)\&.made;
@gui\-editors = @GUIEDITORS\&.grep( \-> %l { %l«type» eq 'config\-line' } )\&.map: \-> %ln { %ln«value»; };
@default\-editors = @GUIEDITORS\&.grep( \-> %l { %l«type» eq 'editor\-to\-use' } )\&.map: \-> %ln { %ln«value»; };
if @default\-editors > 1 {
    $*ERR\&.say: "Error: file $editor\-config/editors is miss configured  more than one editor defined should be 0 or 1";
}
@override\-gui_editor = @GUIEDITORS\&.grep( \-> %l { %l«type» eq 'override\-gui_editor' } )\&.map: \-> %ln { %ln«value»; };
if @override\-gui_editor > 1 {
    my Int:D $elems = @override\-gui_editor\&.elems;
    $*ERR\&.say: qq[Make up your mind only one "override GUI_EDITOR" is required, you supplied $elems are you insane???];
    $override\-GUI_EDITOR = True;
} elsif @override\-gui_editor == 1 {
    $override\-GUI_EDITOR = True;
}
if @gui\-editors {
    #@gui\-editors\&.raku\&.say;
    for @gui\-editors \-> $geditor {
        if !@guieditors\&.grep: { $geditor } {
            my Str $guieditor = $geditor;
            $guieditor \&.=trim;
            @guieditors\&.append($guieditor);
        }
    }
}

if $override\-GUI_EDITOR && @default\-editors {
    $editor = @default\-editors[@default\-editors \- 1];
}elsif %*ENV<GUI_EDITOR>:exists {
    my Str $guieditor = ~%*ENV<GUI_EDITOR>;
    if ! @guieditors\&.grep( { $_ eq $guieditor\&.IO\&.basename } ) {
        @guieditors\&.prepend($guieditor\&.IO\&.basename);
    }
} elsif $editor\-guessed && @default\-editors {
    $editor = @default\-editors[@default\-editors \- 1];
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS $editor

The editor the user has chosen\&.

.RS 4m
.EX
# the editor to use #
my Str:D $editor = '';

sub editor( \-\-> Str:D) is export {
    return $editor;
}


.EE
.RE
.SS edit\-configs()

A function to open the users configuration files in their chosen editor\&.

.RS 4m
.EX
sub edit\-configs() returns Bool:D is export {
    if $editor {
        my $option = '';
        my @args;
        my $edbase = $editor\&.IO\&.basename;
        if $edbase eq 'gvim' {
            $option = '\-p';
            @args\&.append('\-p');
        }
        for @config\-files \-> $file {
            if $file eq 'editors' {
                @args\&.append("$editor\-config/$file");
            } else {
                @args\&.append("$client\-config/$file");
            }
        }
        my $proc = run($editor, |@args);
        return $proc\&.exitcode == 0 || $proc\&.exitcode == \-1;
    } else {
        $*ERR\&.say: "no editor found please set GUI_EDITOR, VISUAL or EDITOR to your preferred editor\&.";
        $*ERR\&.say: "e\&.g\&. export GUI_EDITOR=/usr/bin/gvim";
        $*ERR\&.say: "or set editor in the $editor\-config/editors file this can be done with the set editor command\&.";
        $*ERR\&.say: qq[NB: the editor will be set by first checking GUI_EDITOR then VISUAL then EDITOR and
                    finally editor in the config file so GUI_EDITOR will win over all\&.
                    Unless you supply the "override GUI_EDITOR" directive in the $editor\-config/editors file
                    and also supplied the "editor := <editor>" directive];
        return False;
    }
}


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS Editor functions
.SS list\-editors(…)

List all known GUI Editors, flagging the selected editor with \fB'*'\fR note if none is flagged either \fB$editor\fR is set to a non GUI Editor or \fB$editor\fR is set to the empty string\&.

.RS 4m
.EX
sub list\-editors(Bool:D $colour is copy, Bool:D $syntax \-\-> Bool) is export 


.EE
.RE
.SS list\-editors\-file(…)

List all GUI Editors in the configuration file\&.

.RS 4m
.EX
sub list\-editors\-file(Bool:D $colour is copy, Bool:D $syntax \-\-> Bool) is export 


.EE
.RE
.SS editors\-stats(…)

Show the values of some editors parameters\&.

.RS 4m
.EX
sub editors\-stats(Bool:D $colour is copy, Bool:D $syntax \-\-> Bool) is export 


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS BadEditor

\fBBadEditor\fR is an Exception class for the \fBGUI::Editors\fR module\&.

.RS 4m
.EX
class BadEditor is Exception is export {
    has Str:D $\&.msg = 'Error: bad editor specified';
    method message( \-\-> Str:D) {
        $!msg;
    }
}


.EE
.RE
.SS set\-editor(…)

A function to set the editor of choice\&.

.RS 4m
.EX
sub set\-editor(Str:D $editor, Str $comment = Str \-\-> Bool:D) is export 


.EE
.RE
.P
\fBNB: this will still be overridden by %*ENV«GUI_EDITOR» unless you set \fBoverride GUI_EDITOR\fR\fR\&.
.SS add\-gui\-editor(…)

Add an editor to the list of known GUI Editors\&.

.RS 4m
.EX
sub add\-gui\-editor(Str:D $editor, Str $comment = Str \-\-> Bool:D) is export 


.EE
.RE
.P
\fBNB: please make sure it really is a GUI Editor otherwise this module will not work correctly\&. You are completely free to set the chosen editor to what ever you like\&.\fR
.SS set\-override\-GUI_EDITOR(…)

Set or unset the \fBoverride GUI_EDITOR\fR flag\&.

.RS 4m
.EX
sub set\-override\-GUI_EDITOR(Bool:D $value, Str $comment = Str \-\-> Bool:D) is export 


.EE
.RE
.P
If set then the file always wins else \fB%*ENV«GUI_EDITOR»\fR always wins if set\&.

Top of Document [#table-of-contents]
.SS backup\-editors(…)

Backup the editors file\&.

.RS 4m
.EX
sub backup\-editors(Bool:D $use\-windows\-formatting \-\-> Bool) is export 


.EE
.RE
.P
\fBNB: if $use\-windows\-formatting is true or the program is running on windows then B<<\&.\fR will become \fB·\fR> and \fB:\fR will become \fB\&.\fR, this is to avoid problems with the special meaning of \fB:\fR on windows\&.
Top of Document [#table-of-contents]
.SS restore\-editors(…)

Restore the editors file from a backup\&.

.RS 4m
.EX
sub restore\-editors(IO::Path $restore\-from \-\-> Bool) is export 


.EE
.RE
.P
If \fB$restore\-from\fR is relative and not found from the current directory \fB$editor\-config/$restore\-from\fR will be tried\&. 
.SS list\-editors\-backups(…)

List all the available backups in the \fB$editor\-config\fR\&.

.RS 4m
.EX
sub list\-editors\-backups(Bool:D $colour is copy, Bool:D $syntax \-\-> True) is export


.EE
.RE
.P
Top of Document [#table-of-contents]
.SS backups\-menu\-restore(…)

Presents a menu so you can choose which backup to restore from\&.

.RS 4m
.EX
sub backups\-menu\-restore(Bool:D $colour, Bool:D $syntax,
                                    Str:D $message = "" \-\-> Bool:D) is export 


.EE
.RE
.IP \(bu 2m
Where:
.RS 2n
.IP \(bu 2m
\fB$colour\fR if \fBTrue\fR represents the menu in colours\&.
.RE
.RS 2n
.IP \(bu 2m
\fB$syntax\fR if \fBTrue\fR represents the menu in colours\&.
.RE
.RS 2n
.RS 2n
.IP \(bu 2m
for now $syntax just does the same as \fBcolour\fR, but in future it will lead to a more complex formatting\&.
.RE
.RE
.RS 2n
.RS 2n
.RS 2n
.IP \(bu 2m
uses the \fBGzz::Text::Utils::menu(…)\fR, which uses the \fBGzz::Text::Utils::dropdown(…)\fR function for colour and syntax\&.
.RE
.RE
.RE

Top of Document [#table-of-contents]
.SS edit\-files(…)

Edit arbitrary files using chosen editor\&.

.RS 4m
.EX
sub edit\-files(Str:D @files \-\-> Bool:D) is export 


.EE
.RE
.P
Top of Document [#table-of-contents]
